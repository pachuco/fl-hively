Done:
-Precalculated waveform generator
-Player works
-Compact Tracks[][] into single array and use offset multiplication instead of array nesting
-Turn everything that is public into internal and make a front_panel class
-Clean up warnings

Todo:
-Get license.txt
-Synchro class(animation can be synchronised to music events)
-Optimisation. Currently, complex hvl tunes can get up to 20% CPU usage on a P4 630 @ 3ghz
-Regarding above, steal blep synthesis from kode54's foo_hively.
-Maybe tear the hvl mixer apart and use SoundChannels in hopes that it will take load off CPU? I dunno.
-rewrite wavegen functions to work directly with the vector


Considered optimisations:
-tidy up the code, repackage and rename the classes/functions
-have panning changable on the fly
-try VU meters



// Class quickmap; pointer handling decisions go here
//
// Suggested way would be declaring vectors with the pointed structures in hvl_tune and turning
//the pointers themselves into uint offsets.
// Without memory pre-allocation, we push() stuff into the vectors.

hvl_envelope

hvl_instrument
    hvl_envelope
    hvl_plist                   //Seemed odd at first; this is where the instrument macro sits

hvl_plist
    *hvl_plsentry               //Becomes vector

hvl_plsentry

hvl_position

hvl_step

hvl_tune
    *hvl_position               //Vector.<hvl_position>   malloc_positions()        .
    *hvl_instrument             //Vector.<hvl_instrument> malloc_instruments()      .
    hvl_step[256][64]
    hvl_voice[MAX_CHANNELS]
    ------
    *int8 ht_WaveformTab        //Vector.<uint>   uint offsets
    *uint16 ht_Subsongs         //Vector.<uint>   malloc_subsongs()     //TODO: check usage
    
hvl_voice
    hvl_envelope
    *hvl_instrument             //Already in hvl_tune;        becomes reference
    //used in if statement. Classtype

    *hvl_plist                  //Already in hvl_instrument;  becomes reference
    //used in if statement. Classtype
    ------
    *int8 vc_AudioPointer       //odd enough, it's unused
    *int8 vc_AudioSource        //offset in Waves[]
    *int8 vc_MixSource          //this is used with vc_VoiceBuffer;     becomes reference
    *int8 vc_RingMixSource      //this is used with vc_RingVoiceBuffer; becomes reference
    *int8 vc_RingAudioSource    //offset in Waves[]
    
--------------------------------------------
Things that might/will explode:
-we have a lot of 'if( myint )' or 'if( *mypoint )' in here. Pointers are commonly set as either NULL or 0.
    Unfortunatelly, these pointers tend to be converted to offsets and 0 is a valid offset.
    We would need to overhaul pointy stuff to make use of uint.MAX_VALUE, which is kinda retarded
    MAX_VALUE is assumed unreachable. That might not always be the case.
-ht_WaveformTab[] is in a sorry state. Maybe we should convert it to a Vector.<Vector.<int>>
--------------------------------------------
Local treatment of pointers:

hvl_process_frame()
      *int8 SquarePtr
      *int8 rasrc
      *int8 AudioSource
      *int8 src
      *int8 src

hvl_mixchunk()
      *int8 src[MAX_CHANNELS];      
      *int8 rsrc[MAX_CHANNELS];


